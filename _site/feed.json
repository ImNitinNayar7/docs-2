[
  
  {
    "docs_landing" : "true",
    "url"     : "/docs/",
    "slug"     : "",
    "content": "<p>Just getting started with Snyk? <a href=\"https://snyk.io/docs/quick-start/\" title=\"Quick start guide\">Follow this step-by-step guide</a> to get set up.</p>\n\n<p><a href=\"https://snyk.io/docs/using-snyk/\" title=\"Using Snyk\">Check our documentation</a> for details on how to make the most of Snyk.</p>\n\n<p>Need help with anything you can’t find here? <a href=\"&#109;&#097;&#105;&#108;&#116;&#111;:&#115;&#117;&#112;&#112;&#111;&#114;&#116;&#064;&#115;&#110;&#121;&#107;&#046;&#105;&#111;\">Drop us a line</a> and we’ll get right back to you.</p>\n\n<h2 id=\"cli-commands-overview\">CLI commands overview</h2>\n\n<pre><code class=\"language-console\">snyk [options] [command] [package]\n</code></pre>\n\n<p>The package argument is optional. If no package is given, Snyk will run the command against the current working directory allowing you test you non-public applications.</p>\n\n<h3 id=\"commands\">Commands</h3>\n\n<pre><code class=\"language-console\">auth ............... sign into snyk (required).\ntest ............... test for any known vulnerabilities.\nwizard ............. configure your policy file to update, auto patch and ignore vulnerabilities.\nprotect ............ protect your code from vulnerabilities and optionally suppress specific vulnerabilities.\nmonitor ............ record the state of dependencies and any vulnerabilities on snyk.io.\npolicy ............. display the Snyk policy for a package.\nsupport ............ file an issue or request support.\n</code></pre>\n\n<h3 id=\"options\">Options</h3>\n\n<pre><code class=\"language-console\">--dev .............. include devDependencies (defaults to production only)\n--ignore-policy .... ignores and resets the state of your policy file\n--dry-run .......... don't apply updates or patches during protect.\n-q, --quiet ........ silence all output.\n-h, --help ......... this help information.\n-v, --version ...... the CLI version.\n</code></pre>\n\n<h3 id=\"examples\">Examples</h3>\n\n<pre><code class=\"language-console\">snyk test\nsnyk test ionic@1.6.5\n</code></pre>\n\n<div class=\"alert alert--inline\">\n  <p>Use `snyk test` in your test scripts. If a vulnerability is found, the process will exit with a non-zero exit code.</p>\n</div>\n"
  },
  
  {
    "docs_quick-start" : "true",
    "url"     : "/docs/quick-start/",
    "slug"     : "",
    "content": "<p>Follow this tutorial to get up and running with Snyk. Using our demo app as an example, see how we help you address vulnerabilities with our CLI tool.</p>\n"
  },
  
  {
    "title" : "Set up",
    "docs_quick-start" : "true",
    "url"     : "/docs/quick-start/set-up",
    "slug"     : "set-up",
    "content": "<p>First off, you’ll need a project to test. If you don’t have one handy, you can use our demo application, <a href=\"https://github.com/Snyk/snyk-demo-app\">snyk-demo-app</a>. Simply run these lines to clone it and install its dependencies:</p>\n\n<pre><code class=\"language-console\">git clone https://github.com/Snyk/snyk-demo-app.git\ncd snyk-demo-app\nnpm install\n</code></pre>\n\n<p>Now that you have a project to test, you need to install Snyk from npm, change directory to your project’s folder and run Snyk’s wizard. We’ll install Snyk as a global tool for now; later we’ll touch on using it as a local dependency of your automated tests. Run the following in your project’s folder:</p>\n\n<pre><code class=\"language-console\">npm install –g snyk\nsnyk wizard\n</code></pre>\n\n<p>The wizard walks you through finding and fixing the issues found through upgrades and patches, and creates a Snyk policy (a .snyk file) with your decisions. The wizard leverages four other Snyk commands –<code class=\"highlighter-rouge\">auth</code>, <code class=\"highlighter-rouge\">test</code>, <code class=\"highlighter-rouge\">protect</code> and <code class=\"highlighter-rouge\">monitor</code> – which we’ll explain as we advance.</p>\n"
  },
  
  {
    "title" : "Authentication",
    "docs_quick-start" : "true",
    "url"     : "/docs/quick-start/authentication",
    "slug"     : "authentication",
    "content": "<p>If this is the first time you use Snyk, the wizard will first ask you to register using your GitHub account. <em>Note that Snyk does not require access to your repositories</em>. It only requests access to your email, using GitHub as an authentication system.</p>\n\n<pre><code class=\"language-console\">snyk wizard\n\nNow redirecting you to our github auth page, go ahead and log in,\nand once the auth is complete, return to this prompt and you’ll\nbe ready to start using snyk.\n\nIf you can’t wait use this url:\nhttps://snyk.io/login?token=9b4ae29b-d430-4d79-b9a3-dd522e77f8b9\n\nWaiting...\n</code></pre>\n\n<p>Once authenticated, the wizard will get an API key to store locally and get on with the testing. The same authentication process can be done by running <code class=\"highlighter-rouge\">snyk auth</code>, or running <code class=\"highlighter-rouge\">snyk auth &lt;api-key&gt;</code> (especially useful when integrating Snyk into your build/continuous integration (CI) system).</p>\n"
  },
  
  {
    "title" : "Testing",
    "docs_quick-start" : "true",
    "url"     : "/docs/quick-start/testing",
    "slug"     : "testing",
    "content": "<p>To find vulnerabilities, the wizard will traverse the local project and collect the packages it uses (note this means you should only run it after you run <code class=\"highlighter-rouge\">npm install</code>). It then posts this list to the Snyk service, where they’re matched against Snyk’s <a href=\"https://github.com/Snyk/vulndb\">open source vulnerability database</a>.</p>\n\n<p>This test also can be performed by running <code class=\"highlighter-rouge\">snyk test</code>, which is useful when integrating Snyk into your CI (more on that later).</p>\n\n<p>Once the vulnerabilities are determined, the wizard will go through them and guide you through the remediation steps needed. It remembers the answers you give, and when the questions end it makes the changes you asked for.</p>\n\n<h3 id=\"lets-go-through-the-findings-on-the-snyk-demo-app\">Let’s go through the findings on the snyk demo app.</h3>\n\n<p>You can see the wizard tells you how many vulnerabilities were found in how many dependencies.</p>\n\n<p>The first vulnerability is a <strong>high severity issue in a direct dependency called bassmaster</strong>. There’s only so much detail we can share in a terminal, but you can use the <a href=\"https://snyk.io/vuln/npm:bassmaster:20140927\">info link</a> to get more information about the vulnerability itself.</p>\n\n<pre><code class=\"language-console\">? High severity vulnerability found in bassmaster@1.5.1, introduced via bassmaster@1.5.1\n- info: https://snyk.io/vuln/npm:bassmaster:20140927\n  Remediation options (Use arrow keys)\n❯ Upgrade to bassmaster@1.5.2\n  Patch (modifies files locally, updates policy for `snyk protect` runs)\n  Set to ignore for 30 days (updates policy)\n  Skip\n</code></pre>\n<p><em>Upgrade bassmaster prompt</em></p>\n\n<p>In many cases, disclosed vulnerabilities are fixed shortly after they’re discovered, and all you need to do is upgrade to the relevant version. When that’s possible, upgrade is the cleanest and best way to address such a security bug. In the case of bassmaster, all we need to apply is a ‘fix’ upgrade.</p>\n\n<p>Next, we see that a direct dependency, <strong>falcor-router-demo@1.0.3</strong>, introduced <strong>multiple vulnerabilities</strong>. The vulnerabilities in this case aren’t in the <code class=\"highlighter-rouge\">falcor-router-demo</code> code, but rather in the dependencies it pulls in. This is a very common scenario, as most of the packages used by your application are actually pulled in indirectly.</p>\n\n<p>Unfortunately, you can’t upgrade a deep dependency, both for technical reasons and for fear of breaking functionality. Your remediation step therefore is to upgrade the direct dependency, triggering the deep dependency upgrade. In this case, upgrading <code class=\"highlighter-rouge\">falcor-router-demo</code> to version 1.0.5 (a ‘fix’ upgrade) will trigger the <code class=\"highlighter-rouge\">qs</code> and <code class=\"highlighter-rouge\">semver</code> upgrades you need to fix the vulnerabilities.</p>\n\n<p>The wizard reports <strong>multiple vulnerabilities in the hapi@10.5.0 dependency</strong>. This typically happens when you are several versions behind the latest version, and in the meantime multiple vulnerabilities have been found and fixed. In this case, clicking <a href=\"https://snyk.io/test/npm/hapi/10.5.0\">the info link</a> will show you details for the vulnerabilities that affect hapi.</p>\n\n<pre><code class=\"language-console\">? 7 vulnerabilities introduced via hapi@10.5.0\n- info: https://snyk.io/package/npm/hapi/10.5.0\n  Remediation options (Use arrow keys)\n❯ Upgrade to hapi@11.1.4 (potentially breaking change, triggers upgrade to moment@2.11.2)\n  Review vulnerabilities separately\n  Set to ignore for 30 days (updates policy)\n  Skip\n</code></pre>\n<p><em>Upgrade hapi prompt</em></p>\n\n<p>The wizard’s default suggestion is to upgrade to the latest version, addressing all issues, but you can also choose to review and act on each vulnerability separately.</p>\n"
  },
  
  {
    "title" : "Patch and Protect",
    "docs_quick-start" : "true",
    "url"     : "/docs/quick-start/patch-and-protect",
    "slug"     : "patch-and-protect",
    "content": "<p>Patch and Protect</p>\n\n<p>The next issue the wizard reports on our demo app is different.</p>\n\n<pre><code class=\"language-console\">? High severity vulnerability found in handlebars@3.0.3, introduced via snyk-demo-child@0.0.1\n- from: snyk-demo-child@0.0.1 &gt; handlebars@3.0.3\n- info: https://snyk.io/vuln/npm:handlebars:20151207\n  Remediation options (Use arrow keys)\n❯ Patch (modifies files locally, updates policy for `snyk protect` runs)\n  Set to ignore for 30 days (updates policy)\n  Skip\n</code></pre>\n<p><em>Patch handlebars prompt</em></p>\n\n<p>Snyk found a vulnerability in handlebars, pulled in via the direct dependency <code class=\"highlighter-rouge\">snyk-demo-child</code>. Although the vulnerability <a href=\"https://snyk.io/vuln/npm:handlebars:20151207\">was fixed</a> in handlebars 4.0.0, <code class=\"highlighter-rouge\">snyk-demo-child</code> has not upgraded to that version – so you can’t upgrade the vulnerability away.</p>\n\n<p>This scenario is especially common in recently disclosed vulnerabilities, as it takes a while for the dependency chain to catch up. In addition, sometimes an upgrade is available, but it’s a major upgrade with breaking changes, and you can’t handle it right now. In cases when you have no upgrade option, instead of simply remaining vulnerable, Snyk suggests you patch the vulnerability with a Snyk patch.</p>\n\n<p>After we patch Handlebars, the wizard prompts about two instances of uglify-js vulnerabilities, suggesting you patch them all.</p>\n\n<pre><code class=\"language-console\">? 2 vulnerabilities introduced via uglify-js\n- info: https://snyk.io/package/npm/uglify-js/2.3.6\n  Remediation options (Use arrow keys)\n  Upgrade (no sufficient upgrade available, we'll notify you when there is one)\n❯ Patch the 2 vulnerabilities\n  Review the vulnerabilities separately\n  Set to ignore for 30 days (updates policy)\n  Skip\n</code></pre>\n<p><em>Patch uglify prompt</em></p>\n\n<p>As projects expand, it’s common to find the same package repeated in the dependency tree, and it’s not that rare for one package to have multiple vulnerabilities. When the wizard sees multiple instances of a vulnerable package, it offers a shortcut to patch them all to save time. You can still choose to review and patch each issue separately, and if an instance was sufficiently upgraded by previously chosen upgrades it won’t be touched.</p>\n\n<p>Note the wizard only patches the <em>locally installed</em> files. This means you need to reapply this patch every time dependencies are reinstalled, which you can do by running <code class=\"highlighter-rouge\">snyk protect</code>. The wizard stores the patches you chose in the Snyk policy (<em>.snyk</em>), and <code class=\"highlighter-rouge\">snyk protect</code> will apply those patches, and those patches alone – it never unilaterally applies a patch. Each time you reinstall your dependencies, you should run <code class=\"highlighter-rouge\">snyk protect</code> to close the vulnerabilities. The wizard can do this for you, as we’ll see later on.</p>\n"
  },
  
  {
    "title" : "Ignore",
    "docs_quick-start" : "true",
    "url"     : "/docs/quick-start/ignore",
    "slug"     : "ignore",
    "content": "<p>This issue the wizard shows is not as easily solved.</p>\n\n<pre><code class=\"language-console\">? Medium severity vulnerability found in validator@3.1.0, introduced via azure-mgmt-storage@0.9.16\n- from: azure-mgmt-storage@0.9.16 &gt; azure-common@0.9.11 &gt; validator@3.1.0\n- info: https://snyk.io/vuln/npm:validator:20130705\n  Remediation options (Use arrow keys)\n  Upgrade (no sufficient upgrade available, we'll notify you when there is one)\n  Patch (modifies files locally, updates policy for `snyk protect` runs)\n❯ Set to ignore for 30 days (updates policy)\n  Skip\n</code></pre>\n<p><em>Validator vulnerability</em></p>\n\n<p>A vulnerability is found in a deep <code class=\"highlighter-rouge\">validator</code> dependency, which has neither an upgrade nor a patch available. There are many combinations of vulnerability and module versions, and not all of them can be patched. Snyk’s security team is constantly adding more patches to the <a href=\"https://github.com/Snyk/vulndb\">open source VulnDB</a> and would <a href=\"https://github.com/Snyk/vulndb/blob/master/CONTRIBUTING.md\">welcome pull requests</a>, but some issues still have no patch.</p>\n\n<p>There’s no easy fix for these issues. You’ll need to better understand the risk this issue presents to your system, and weigh this risk against the effort of fixing the issue – for instance, by removing the dependency. While you consider your actions, you can ‘snooze’ the issue with Snyk, telling it to ignore the issue for 30 days. Snyk will prompt you to provide a reason for ignoring, to help you remember why you did it later on.</p>\n\n<pre><code class=\"language-console\">? Medium severity vulnerability found in validator@3.1.0, introduced via azure-mgmt-storage@0.9.16\n- from: azure-mgmt-storage@0.9.16 &gt; azure-common@0.9.11 &gt; validator@3.1.0\n- info: https://snyk.io/vuln/npm:validator:20130705\n  Remediation options Ignore\n? [audit] Reason for ignoring vulnerability? (None given) Not deployed to production\n</code></pre>\n<p><em>Validator ignore reason</em></p>\n\n<p>If you assess the vulnerability and decide it’s not an issue (for instance, because a component is not really deployed to production), you can manually edit the Snyk policy (<em>.snyk</em>) file to use a far-future expiry date for this instance. Note that Snyk does not test devDependencies by default, avoiding most such red herrings.</p>\n\n<p>In addition to any action you take, Snyk will let you know when a patch or upgrade become available for this scenario, so you can apply a better solution.</p>\n"
  },
  
  {
    "title" : "Applying your choices",
    "docs_quick-start" : "true",
    "url"     : "/docs/quick-start/applying-your-choices",
    "slug"     : "applying-your-choices",
    "content": "<p>That’s it, we’ve tackled all the issues – hurray!</p>\n\n<p>Before the wizard applies the requested changes, it suggests adding two steps to your Package.json workflow to keep you vulnerability free.</p>\n\n<pre><code class=\"language-console\">? Add `snyk test` to package.json file to fail test on newly disclosed vulnerabilities? Yes\n? Add `snyk protect` as a package.json installation hook to apply chosen patches on install? (Y/n)\n</code></pre>\n<p><em>Package.json steps</em></p>\n\n<p>First, the wizard suggests adding Snyk’s test to your regular <code class=\"highlighter-rouge\">npm test</code> action. If a vulnerable package was added, the test would fail, keeping you safe. The wizard will also add <code class=\"highlighter-rouge\">snyk</code> as devDependency, as you’ll need it in your test or CI environment. You can use the same logic to run this test in any favourite CI/test platform.</p>\n\n<p>If you’ve chosen to patch an issue, the wizard will also suggest adding <code class=\"highlighter-rouge\">snyk protect</code> to the <code class=\"highlighter-rouge\">postinstall</code> step. A post installation hook runs every time you install this package’s dependencies, ensuring those dependencies are always properly patched. Note that such a hook requires adding <code class=\"highlighter-rouge\">snyk</code> as a dependency (not devDependency).</p>\n\n<pre><code class=\"language-console\">Applying patches...\nRunning `npm update`...\nSaving .snyk policy file...\nUpdating package.json...\nRemembering current dependencies for future notifications...\n\nYour policy file has been created with the actions you've selected, add it to your source control (`git add .snyk`).\nTo review your policy, run `snyk policy`.\n\nYou can see a snapshot of your dependencies here:\nhttps://snyk.io/monitor/441b89f0-6e5a-40a0-9e4e-d824e51998a2\n\nWe'll notify you when relevant new vulnerabilities are disclosed.\n</code></pre>\n<p><em>Snyk wizard applied changes.</em></p>\n\n<p>With all the questions answered, the wizard proceeds to apply the changes. It modifies the Package.json file with any upgrade requests or hooks, runs <code class=\"highlighter-rouge\">npm update</code> to apply the changes, and stores the Snyk policy in the <em>.snyk</em> file (you can pretty-print it by running <code class=\"highlighter-rouge\">snyk policy</code>). Make sure to add this <em>.snyk</em> file to your source control for patch and ignore instructions to apply.</p>\n\n<p>Lastly, the wizard takes a snapshot of your dependencies, so it can monitor them over time.</p>\n"
  },
  
  {
    "title" : "Monitor",
    "docs_quick-start" : "true",
    "url"     : "/docs/quick-start/monitor",
    "slug"     : "monitor",
    "content": "<p>Now that you’re free of known vulnerabilities, there are two ways that can change. The first is adding vulnerable packages to your code, which we handle by adding <code class=\"highlighter-rouge\">snyk test</code> to your test/CI system. The second is through newly disclosed vulnerabilities. These are new disclosures of vulnerabilities in old code – the code you’re running in production!</p>\n\n<p>This is addressed by Snyk’s last step – monitor. The snapshot the wizard takes is saved on Snyk’s servers, remembering the dependencies used on this application. If a newly disclosed vulnerability affects your application, you’ll get an email alerting you to it. You can then run the wizard again to upgrade or patch as needed, and deploy the secure code.</p>\n\n<p>To keep Snyk’s understanding of your application up to date, you can run <code class=\"highlighter-rouge\">snyk monitor</code> at the end of your deployment process. Doing so will take a fresh snapshot of your application, just like the wizard does, and will ensure Snyk’s alerts apply to your most recent code.</p>\n\n<p>You know have an overview of Snyk test, protect, and monitor, and you’ve used the wizard that walks you through fixing your vulnerabilities. If you’d like to know more, take a look at our detailed documentation, and our FAQ.</p>\n"
  },
  
  {
    "docs_using-snyk" : "true",
    "url"     : "/docs/using-snyk/",
    "slug"     : "",
    "content": "<p>Snyk helps you find and fix known vulnerabilities in your Node.js dependencies, both ad hoc and as part of your CI (Build) system.</p>\n\n<p>Note: Snyk is currently in beta. <a href=\"&#109;&#097;&#105;&#108;&#116;&#111;:&#115;&#117;&#112;&#112;&#111;&#114;&#116;&#064;&#115;&#110;&#121;&#107;&#046;&#105;&#111;\">Email us your feedback</a>.</p>\n"
  },
  
  {
    "title" : "Installation",
    "docs_using-snyk" : "true",
    "url"     : "/docs/using-snyk/installation",
    "slug"     : "installation",
    "content": "<p>Snyk is installed via npm. Run these commands to install it for local use:</p>\n\n<div class=\"highlight\"><pre><code class=\"language-console\" data-lang=\"console\">npm install -g snyk</code></pre></div>\n\n<p>Once installed, you can perform a quick test on a public package, for instance:</p>\n\n<div class=\"highlight\"><pre><code class=\"language-console\" data-lang=\"console\">snyk test ionic@1.6.5</code></pre></div>\n\n<p>As you can see, Snyk found and reported several vulnerabilities in the package. For each issue found, Snyk provides the severity of the issue, a link to a detailed description, the path through which the vulnerable module got into your system, and guidance on how to fix the problem.</p>\n\n<div class=\"screenshot\">\n<h3 class=\"screenshot__label\">Example output</h3>\n<pre class=\"code\">$ snyk test\n<span class=\"syn--red\">✗ Vulnerability found on gm@1.13.3</span>\nInfo: https://snyk.io/vuln/npm:gm:20151026\nFrom: snyk-demo-app@latest &gt; gm@1.13.3\n<span class=\"syn--white syn--bold\">Upgrade direct dependency gm@1.13.3 to gm@1.21.1</span>\n\n<span class=\"syn--red\">✗ Vulnerability found on qs@0.6.6</span>\nInfo: https://snyk.io/vuln/npm:qs:20140806\nFrom: snyk-demo-app@latest &gt; webdriverio@2.4.5 &gt; request@2.34.0 &gt; qs@0.6.6\n<span class=\"syn--white syn--bold\">Upgrade direct dependency webdriverio@2.4.5 to webdriverio@3.0.1 (triggers upgrades to request@2.40.0 &gt; qs@1.0.0)</span>\n\n<span class=\"syn--red\">✗ Vulnerability found on qs@0.4.2</span>\nInfo: https://snyk.io/vuln/npm:qs:20140806-1\nFrom: snyk-demo-app@latest &gt; cucumber@0.3.0 &gt; connect@2.3.2 &gt; qs@0.4.2\nNo direct dependency upgrade can address this issue.\n<span class=\"syn--white syn--bold\">Run `snyk wizard` to explore remediation options</span></pre>\n</div>\n"
  },
  
  {
    "title" : "Authentication",
    "docs_using-snyk" : "true",
    "url"     : "/docs/using-snyk/authentication",
    "slug"     : "authentication",
    "content": "<p>Some Snyk commands require authentication. We use GitHub for authentication, but <strong>do not require access to your repositories</strong>, only your email address. You can authenticate by clicking <a href=\"https://snyk.io/auth/github\">“Sign Up”</a>, and pasting in the lines from your dashboard, which look roughly like this:</p>\n\n<div class=\"highlight\"><pre><code class=\"language-console\" data-lang=\"console\"><span class=\"go\">snyk auth &lt;your key&gt;</span></code></pre></div>\n\n<p>Alternatively, you can simply run <code class=\"highlighter-rouge\">snyk auth</code> in your terminal and it’ll guide you through this process. Or jump right into Snyk’s <a href=\"#wizard\"><code>wizard</code></a>, that will also take you through authentication.</p>\n"
  },
  
  {
    "title" : "Wizard",
    "docs_using-snyk" : "true",
    "url"     : "/docs/using-snyk/wizard",
    "slug"     : "wizard",
    "content": "<p>Snyk’s <code>wizard</code> walks you through finding and fixing the known vulnerabilities in your project. It leverages the separate <a href=\"#test\"><code>test</code></a>, <a href=\"#protect\"><code>protect</code></a> and <a href=\"#monitor\"><code>monitor</code></a> actions, supported by an interactive workflow. To run the wizard, simply navigate to your project folder and run <code>snyk wizard</code> like so:</p>\n\n<div class=\"highlight\"><pre><code class=\"language-console\" data-lang=\"console\"><span class=\"go\">cd ~/projects/myproj/</span>\n<span class=\"go\">snyk wizard</span></code></pre></div>\n\n<p>The wizard goes through multiple phases.\nFirst, it takes stock of which dependencies are locally installed, queries the snyk service for related known vulnerabilities, and asks you how you want to address each vulnerability that was found. As you answer the questions, the wizard will create a Snyk policy file, stored in a file named <code>.snyk</code>, which will guide future Snyk commands.</p>\n\n<p>Here are the possible remediation steps for each vulnerability:</p>\n\n<ul>\n  <li><strong>Upgrade</strong> - if upgrading a direct dependency can fix the current vulnerability, the wizard can automatically modify your <code>package.json</code> file to use the newer version and run <code>npm update</code> to apply the changes.</li>\n  <li><strong>Patch</strong> - Sometimes there is no direct upgrade that can address the vulnerability, or there is one but you can’t upgrade due to functional reasons (e.g. it’s a major breaking change). For such cases, the wizard lets you patch the issue (using patches the Snyk team created and maintain). This option will make the minimal modifications to your locally installed module files to fix the vulnerability. It will also update the policy to patch this issue when running <a href=\"#protect\"><code>snyk protect</code></a>, as shown below.</li>\n  <li><strong>Ignore</strong> - If you believe this vulnerability is not exploitable, you can set the Snyk policy to ignore this vulnerability. By default, we will ignore the vulnerability for 30 days, to avoid easily hiding a true issue. If you want to ignore it permanently, you can manually edit the generated <code>.snyk</code> file. If neither a patch nor an upgrade are available, you can choose to ignore the issue for now, and we’ll notify you when a new patch or upgrade is available.</li>\n</ul>\n\n<p>If more than one vulnerability is introduced via the same module, then the wizard groups them. You can simply upgrade, patch or ignore all of them; or if you want to see more details, you can review each vulnerability separately.</p>\n\n<div class=\"screenshot\">\n<h3 class=\"screenshot__label\">Example output</h3>\n<pre class=\"code\">$ snyk wizard\n\nSnyk's wizard will:\n\n  * Enumerate your local dependencies and query Snyk's servers for vulnerabilities\n  * Guide you through fixing found vulnerabilities\n  * Create a .snyk policy file to guide snyk commands such as test and protect\n  * Remember your dependencies to alert you when new vulnerabilities are disclosed\n\nLoading dependencies...\nQuerying vulnerabilities database...\nTested 228 dependencies for known vulnerabilities, <span class=\"syn--red syn--bold\">found 5 vulnerabilities.</span>\n\n<span class=\"syn--green\">?</span> <span class=\"syn--white syn--bold\">High severity vulnerability found in gm@1.13.3\n  - info: <a href=\"https://snyk.io/vuln/npm:gm:20151026\" title=\"Vulnerability report.\">https://snyk.io/vuln/npm:gm:20151026</a>\n  - from: snyk-demo-app@latest &gt; gm@1.13.3</span> <span class=\"syn--blue\">Upgrade</span>\n\n<span class=\"syn--green\">?</span> <span class=\"syn--white syn--bold\">4 vulnerabilities introduced via falcor-router-demo@1.0.3\n  - info: <a href=\"https://snyk.io/package/npm/falcor-router-demo/1.0.3\" title=\"Package test report.\">https://snyk.io/package/npm/falcor-router-demo/1.0.3</a>\n  Remediation options (Use arrow keys)</span>\n<span class=\"syn--blue\">❯ Upgrade to falcor-router-demo@1.0.5 (triggers upgrade to semver@4.3.3, qs@4.0.0) </span>\n  Review vulnerabilities separately\n  Set to ignore for 30 days (updates policy)\n  Skip</pre>\n</div>\n\n<p>Once all the issues are addressed, <code>snyk wizard</code> will optionally integrate some tests and protection steps into your <code>package.json</code> file:\n<ul>\n\t<li>It can add <a href=\"#test\"><code>snyk test</code></a> to the <code>test</code> script, which will query your local dependencies for vulnerabilities and err if found (except those you chose to ignore).</li>\n\t<li>If you chose to patch an issue, the wizard will optionally add <a href=\"#protect\"><code>snyk protect</code></a> to your project as a <code>post-install</code> step. This is helpful if you publish this module, as it will repeatedly patch the issues specified in <code>.snyk</code> every time a module is installed.</li>\n</ul>\n\n<p>Lastly, the wizard will create the <code>.snyk</code> file, modify <code>package.json</code> and run <code>npm update</code> to apply the changes. To monitor your project for new vulnerabilities, the wizard takes a snapshot of your current dependencies (similar to running <a href=\"#monitor\"><code>snyk monitor</code></a>). You can see all the snapshots for a project on the snyk website. We'll notify you via email if you're affected by newly disclosed vulnerabilities in them, or when a previously unavailable patch or upgrade path are available.</p>\n\n<h3 id=\"a-few-things-to-note\">A few things to note:</h3>\n\n<ul>\n  <li>The wizard doesn’t perform any git (or source control) actions, so be sure to add the <code>.snyk</code> file to your repository.</li>\n  <li>Subsequent runs of the wizard will not show items previously ignored. To start a-fresh, run <code>snyk wizard --ignore-policy</code>.</li>\n  <li>By default, both <code>wizard</code> and <a href=\"#test\"><code>test</code></a> ignore devDependencies. To test those, add the <code>--dev</code> flag.</li>\n</ul>\n</p>\n"
  },
  
  {
    "title" : "Test",
    "docs_using-snyk" : "true",
    "url"     : "/docs/using-snyk/test",
    "slug"     : "test",
    "content": "<p>To only test your project for known vulnerabilities, browse to your project’s folder and run <code>snyk test</code>:</p>\n\n<div class=\"highlight\"><pre><code class=\"language-console\" data-lang=\"console\"><span class=\"go\">cd ~/projects/myproj/</span>\n<span class=\"go\">snyk test</span></code></pre></div>\n\n<p><code>snyk test</code> takes stock of all the local dependencies and queries the snyk service for related known vulnerabilities. It displays the found issues along with additional information, and suggests remediation steps. Since <code>snyk test</code> looks at the locally installed modules, it needs to run after <code>npm install</code>, and will seamlessly work with <code>shrinkwrap</code>, npm enterprise or any other custom installation logic you have.</p>\n\n<p><code>snyk test</code> can also get a folder name as an argument, which is especially handy if you want to <strong>test multiple projects.</strong> For instance, the following command tests all the projects under a certain folder for known vulnerabilities:</p>\n\n<div class=\"highlight\"><pre><code class=\"language-console\" data-lang=\"console\"><span class=\"go\">cd ~/projects/</span>\n<span class=\"go\">snyk test *</span></code></pre></div>\n\n<p>To address the issues <code>snyk test</code> found, run <a href=\"#wizard\"><code>snyk wizard</code></a>.</p>\n\n<p>You can also use <code>snyk test</code> to <strong>scrutinize a public package before installing it</strong>, to see if it has known vulnerabilities or not. Using the package name will test the latest version of that package, and you can also provide a specific version or range using <code>snyk test module[@semver-range]</code>.</p>\n\n<div class=\"highlight\"><pre><code class=\"language-console\" data-lang=\"console\"><span class=\"go\">snyk test lodash</span>\n<span class=\"go\">snyk test ionic@1.6.5</span></code></pre></div>\n\n<p><strong>To test a public Github repository,</strong> just run <code>snyk test</code> and include the Github URL to the repo.</p>\n<div class=\"highlight\"><pre><code class=\"language-console\" data-lang=\"console\"><span class=\"go\">snyk test https://github.com/snyk/snyk</span></code></pre></div>\n<h3 id=\"git-url-formats\">The following git URL formats are supported:</h3>\n\n<ul>\n  <li>git://github.com/user/project.git#commit-ish</li>\n  <li>https://github.com/user/project#commit-ish</li>\n  <li>user/project#commit-ish</li>\n</ul>\n<p>This also works for Bitbucket and GitLab.</p>\n<p>You can also test a public npm package or Github project <a href=\"https://snyk.io/test/\" title=\"Test page\">via the Test page on snyk.io</a></p>\n"
  },
  
  {
    "title" : "Protect",
    "docs_using-snyk" : "true",
    "url"     : "/docs/using-snyk/protect",
    "slug"     : "protect",
    "content": "<p>The <code>protect</code> command applies the patches specified in your <code>.snyk</code> file to the local file system. Run <code>snyk protect</code> after you’ve created a .snyk file and installed your local dependencies (e.g. by running <code>npm install</code>).<code>snyk wizard</code> will do this as a last step. </p>\n\n<p>Since running <code>protect</code> is the way to repeatedly apply patches, you should run it every time you reinstall your modules. Common integration points would be your CI/build system, your deployment system, and adding it as a post installation step in your <code>package.json</code> file (necessary if you consume this module via <code>npm</code>).</p>\n"
  },
  
  {
    "title" : "Monitor",
    "docs_using-snyk" : "true",
    "url"     : "/docs/using-snyk/monitor",
    "slug"     : "monitor",
    "content": "<p>With <a href=\"#test\"><code>test</code></a> and <a href=\"#protect\"><code>protect</code></a>, you’re well set up to address currently known vulnerabilities. However, new vulnerabilities are constantly disclosed - which is where <code>monitor</code> comes in.</p>\n\n<div class=\"highlight\"><pre><code class=\"language-console\" data-lang=\"console\"><span class=\"go\">cd ~/projects/myproject/ snyk monitor</span></code></pre></div>\n\n<p>Just before you deploy, run <code>snyk monitor</code> in your project directory. This will take a snapshot of your current dependencies, so we can notify you about newly disclosed vulnerabilities in them, or when a previously unavailable patch or upgrade path are created. If you take multiple snapshots of the same project, we will only alert you to new information about the latest one.</p>\n\n<p>Log in and go to <a href=\"https://snyk.io/monitor/\">snyk.io/monitor</a> to see the lastest snapshot and history of your project.</p>\n\n<div class=\"screenshot\">\n<h3 class=\"screenshot__label\">Example output</h3>\n<pre class=\"code\">$ snyk monitor\nCaptured a snapshot of this project's dependencies. Explore this snapshot at https://snyk.io/monitor/1a53f19a-f64f-44ab-b122-74ce82c1c34b\nNotifications about newly disclosed vulnerabilities related to these dependencies will be emailed to you.</pre>\n</div>\n"
  },
  
  {
    "title" : "Integrating Snyk into your dev workflow",
    "docs_using-snyk" : "true",
    "url"     : "/docs/using-snyk/integrating-snyk-into-your-dev-workflow",
    "slug"     : "integrating-snyk-into-your-dev-workflow",
    "content": "<p>To continuously avoid known vulnerabilities in your dependencies, integrate Snyk into your continuous integration (a.k.a. build) system. Here are the steps required to to so:</p>\n\n<ol>\n  <li>Add <code>snyk</code> to your project’s dependencies (<code>npm install -S snyk</code>), and commit the modified <code>package.json</code> file.</li>\n  <li>Ensure the <code>.snyk</code> file you generated was added to your source control (<code>git add .snyk</code>).</li>\n  <li>After the <code>npm install</code> steps in your CI, run <a href=\"#protect\"><code>snyk protect</code></a> to apply any necessary patches.</li>\n  <li>Run <a href=\"#test\"><code>snyk test</code></a> to identify on any known vulnerabilities not already ignored or patched. If such vulnerabilities were found, <a href=\"#test\"><code>snyk test</code></a> will return a non-zero value to fail the test.</li>\n</ol>\n"
  },
  
  {
    "title" : "Badge",
    "docs_using-snyk" : "true",
    "url"     : "/docs/using-snyk/badge",
    "slug"     : "badge",
    "content": "<p>Once you’re vulnerability free, you can put a badge on your README showing your package has no known security holes. This will show your users you care about security, and tell them that they should care too.</p>\n\n<p>If there are no vulnerabilities, this is indicated by a green badge.</p>\n\n<p><a class=\"link--unstyled\" href=\"https://snyk.io/test/npm/name\"><img src=\"https://snyk.io/test/npm/name/badge.svg\" alt=\"Known Vulnerabilities\" data-canonical-src=\"https://snyk.io/test/npm/name/\" style=\"max-width:100%;\" /></a></p>\n\n<p>If vulnerabilities have been found, the red badge will show the number of vulnerabilities.</p>\n\n<p><a class=\"link--unstyled\" href=\"https://snyk.io/test/npm/jsbin\"><img src=\"https://snyk.io/test/npm/jsbin/badge.svg\" alt=\"Known Vulnerabilities\" data-canonical-src=\"https://snyk.io/test/npm/jsbin/\" style=\"max-width:100%;\" /></a></p>\n\n<p><em>Note:</em> The badge works off the npm package, and does not factor in .snyk files yet. (This means that ignored vulnerabilities will not be taken into account).</p>\n\n<p>Get the badge by copying the relevant snippet below and replacing “name” with the name of your package.</p>\n\n<h3 id=\"html\">HTML:</h3>\n\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;img</span> <span class=\"na\">src=</span><span class=\"s\">\"https://snyk.io/test/npm/name/badge.svg\"</span> <span class=\"na\">alt=</span><span class=\"s\">\"Known Vulnerabilities\"</span> <span class=\"na\">data-canonical-src=</span><span class=\"s\">\"https://snyk.io/test/npm/name style=\"</span><span class=\"na\">max-width:100</span><span class=\"err\">%;</span><span class=\"nt\">/&gt;</span>\n</code></pre>\n</div>\n\n<h3 id=\"markdown\">Markdown:</h3>\n\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"p\">[</span><span class=\"nv\">![Known Vulnerabilities</span><span class=\"p\">](</span><span class=\"sx\">https://snyk.io/test/npm/name/badge.svg</span><span class=\"p\">)</span>](https://snyk.io/test/npm/name)\n</code></pre>\n</div>\n"
  },
  
  {
    "title" : "Credits",
    "docs_using-snyk" : "true",
    "url"     : "/docs/using-snyk/credits",
    "slug"     : "credits",
    "content": "<p>While we use multiple sources to determine vulnerabilities, the primary (current) source is the <a href=\"http://nodesecurity.io\">Node Security project</a>.</p>\n"
  },
  
  {
    "title" : "About known vulnerabilities",
    "docs_faqs" : "true",
    "url"     : "/docs/faqs/about-known-vulnerabilities",
    "slug"     : "about-known-vulnerabilities",
    "content": "<h3 class=\"h4\">What are known vulnerabilities?</h3>\n\n<p>Known vulnerabilities are publicly disclosed security bugs, typically found and logged by users, or reported by security researchers. Being public makes these issues the easiest ones for attackers to find and exploit <a href=\"http://www.theregister.co.uk/2015/02/23/hp_hack_vulnerable_threat_study/\">[1]</a>, and therefore very important to address.</p>\n\n<h3 class=\"h4\">What are direct and deep dependencies?</h3>\n\n<p>Known vulnerabilities can be introduced either via a direct or via a deep dependency.</p>\n\n<ul>\n\t<li>A direct dependency is a is a package that you've included in your own project via package.json.</li>\n\t<li>A deep dependency, also referred to as an indirect, chained, or transitive dependency, is a package that you are not using directly, but one that is used by one of your direct dependencies.</li>\n</ul>\n\n<p>In other words, if your application is using module A, and module A is using module B, then your application is indirectly depending on module B. And if module B is vulnerable, you are vulnerable.</p>\n\n<h3 class=\"h4\">How do you determine the severity of a vulnerability?</h3>\n\n<p>The severity of a vulnerability is manually assigned by our security research team. It’s based primarily on the impact of the vulnerability, and by how easy it is to exploit it.</p>\n\n<p>For instance, the <a href=\"https://snyk.io/vuln/npm:bassmaster:20140927\">bassmaster vulnerability</a> allows an attacker to execute code on your server (a “remote command execution” vulnerability), and can easily be exploited with a well crafted request, making it a high severity issue. The <a href=\"https://snyk.io/vuln/npm:dns-sync:20141111\">dns-sync vulnerability</a> also allows remote command execution, but to exploit it an attacker needs to control the name of the host you resolve - a less likely scenario. Therefore, it was deemed medium severity.</p>\n\n<h3 class=\"h4\">Why should I monitor my projects for known vulnerabilities? </h3>\n\n<p>New vulnerabilities aren’t actually new security holes - they’re newly disclosed, but impact old, existing code. This means you could have new known vulnerabilities without making any code changes. <a href=\"https://snyk.io/docs/using-snyk/#monitor\">Monitoring your projects</a> means you’ll be the first to know if you are affect by a newly disclosed vulnerability, and you can assess and act upon the vulnerability risk quickly.</p>\n"
  },
  {
    "title" : "Fixing vulnerabilities",
    "docs_faqs" : "true",
    "url"     : "/docs/faqs/fixing-vulnerabilities",
    "slug"     : "fixing-vulnerabilities",
    "content": "<h3 class=\"h4\">What can I do if I’m vulnerable?</h3>\n\n<p>If possible, the cleanest and best way to address a vulnerability is to upgrade to a vulnerability-free version of the module you’re using. In most cases, disclosed vulnerabilities are fixed shortly after they’re discovered, and all you need to do is upgrade to the relevant version.</p>\n\n<p>If the vulnerability is introduced by a deep (i.e. indirect) dependency, you can’t upgrade it away for technical reasons, and for fear of breaking functionality. Snyk's <a href=\"https://snyk.io/docs/using-snyk/#wizard\"><code>wizard</code></a> will guide you to the best direct dependency upgrade that will trigger the necessary deep dependency upgrade.</p>\n\n<p>If you can’t upgrade, because there is no sufficient direct upgrade available, or because the upgrade includes breaking changes you can’t take on right now, your next best option is to apply a patch. A patch changes the locally installed package file to fix the vulnerability. \nSnyk's <a href=\"https://snyk.io/docs/using-snyk/#wizard\"><code>wizard</code></a> will detect the best remediation option for each vulnerability for you; you can also find remediation guidance on the report page (for your monitored project, or for a public package you've tested) on the Snyk website.</p>\n\n<h3 class=\"h4\">What does patching mean?</h3>\n\n<p>A patch will make the minimum changes required to your locally installed package files, to fix the vulnerability. Patching is a good option to fix vulnerabilities when you can’t upgrade. \nIf you’re monitoring your project, we will notify you once an upgrade becomes available.</p>\n\n<h3 class=\"h4\">Can patching break my code?</h3>\n\n<p>We test all patches we release rigorously, and keep the changes a patch makes to your code to a minimum. We haven’t seen a single case where our patches broke intended functionality. However, we can’t guarantee that a patch won’t break something. If you are unsure, it’s best to take a look at the patch before applying it.</p>\n\n<h3 class=\"h4\">When I can choose, how should I decide whether to upgrade or patch?</h3>\n\n<p>An upgrade is usually the best way to fix a vulnerability. If both an upgrade and a patch are available, Snyk will usually recommend the upgrade. However, Snyk's <a href=\"https://snyk.io/docs/using-snyk/#wizard\"><code>wizard</code></a> lets you choose to patch, even if an upgrade is available. You might want to patch if an upgrade would be a potentially breaking change (we highlight if this is the case), or if you have other reasons to not upgrade for now.</p>\n<p>If you’re unsure and would like to assess the impact before applying a fix, you can get details for each vulnerability on our website.</p>\n\n<h3 class=\"h4\">What if there is no upgrade or patch available?</h3>\n\n<p>Assess the issue, and weigh up risk against effort. If the risk is high, you could remove the dependency. Using `snyk wizard`, you can ignore the vulnerability for 30 days, adding a reason why. Snyk will ask you again what to do in 30 days time; and if you monitor the project, we will notify you if any upgrades or patches become available.</p>\n\n<p>If you decide that the vulnerability is not an issue (for instance, because a component is not really deployed to production), you can manually edit the Snyk policy (.snyk) file to use a far-future expiry date for this instance. Note that Snyk does not test devDependencies by default, avoiding most such red herrings.</p>\n\n"
  },
  {
    "title" : "Security research",
    "docs_faqs" : "true",
    "url"     : "/docs/faqs/security-research",
    "slug"     : "security-research",
    "content": "<h3 class=\"h4\">How do you find out about new vulnerabilities?</h3>\n\n<p>We monitor existing node.js security portals and tools, such as <a href=\"https://nodesecurity.io/\">Node Security Project</a>, the <a href=\"https://groups.google.com/forum/#!forum/nodejs-sec\">nodejs-sec Google Group</a>, <a href=\"https://srcclr.com/\">SRC:CLR</a>, or <a href=\"http://retirejs.github.io/retire.js/\">Retire.js</a>. We also monitor Github activity and other online sources for new vulnerabilities.</p>\n\n<h3 class=\"h4\">Where does Snyk get patches from?</h3>\n\n<p>Patches are created and maintained by Snyk. If the package owner has made code changes to fix the issues, our patch is based on this official fix, and we remove any cosmetic or unrelated changes. If a package owner has not addressed the vulnerability yet, we write a patch from scratch.</p>\n\n<p>Before releasing it, we verify the patch, backport it to older versions, and test that the patch hasn’t broken functionality.</p>\n\n<p>The patches are a part of <a href=\"https://github.com/Snyk/vulndb/\">Snyk’s open source vulnerability database</a>, so you can check them out before applying them. For example, the patches for the <a href=\"https://github.com/Snyk/vulndb/tree/master/data/npm/ms/20151024\">ms ReDoS vulnerability</a>. \nWe don’t have patches for every case - if you need one that’s missing, <a href=\"mailto:contact@snyk.io\">let us know</a>. We also <a href=\"https://github.com/Snyk/vulndb/blob/master/CONTRIBUTING.md\">accept pull requests</a>!</p>\n"
  },
  {
    "title" : "Using Snyk",
    "docs_faqs" : "true",
    "url"     : "/docs/faqs/using-snyk",
    "slug"     : "using-snyk",
    "content": "<h3 class=\"h4\">Why should I add Snyk `test` to my Continuous Integration (CI)?</h3>\n\n<p>Integrating Snyk will prevent code changes from introducing new vulnerable packages. <a href=\"https://snyk.io/docs/using-snyk/#integrating-snyk-into-your-dev-workflow\">Find out how to integrate Snyk into your workflow.</a></p>\n\n<h3 class=\"h4\">How can I test a Github repository from the command-line interface tool (CLI)?</h3>\n\n<p>Currently, we support testing public Github repositories only. \nTo test a public Github repository, just run snyk test and include the Github URL to the repo.</p>\n\n<div class=\"highlight\"><pre><code class=\"language-console\" data-lang=\"console\"><span class=\"go\">snyk test https://github.com/snyk/snyk</span></code></pre></div>\n\n<p>The following git URL formats are supported:</p>\n<ul>\n\t<li>git://github.com/user/project.git#commit-ish</li>\n\t<li>https://github.com/user/project#commit-ish</li>\n\t<li>user/project#commit-ish</li>\n</ul>\n<p>This also works for Bitbucket and GitLab.<p>\n<p>You can also test a public npm package or Github project via the <a href=\"https://snyk.io/test/\">Test page on snyk.io.</a></p>\n\n<h3 class=\"h4\">How can I delete my data?</h3> \n\n<p>You can delete a project on the project page on the Snyk website. This will delete the project, and all snapshots that are related to it, and you won’t be able to access it. Please note that the data remains in our database, so if you would like to restore it, let us know. If you would like us to delete your project data permanently from the database, <a href=\"mailto:support@snyk.io\">email us</a> and we’ll sort it out.</p> \n\n<h3 class=\"h4\">How can I delete my account?</h3> \n\n<p>Until we support deleting your account via the Snyk website, this is a manual process. <a href=\"mailto:support@snyk.io\">Email us</a>, and we will remove your account and all your data from our database.</p>\n\n<h3 class=\"h4\">What analytics do you track? How can I opt out?</h3>\n\n<p>We are using a range of web analytics tools to understand and analyse user behaviour on snyk.io. If you’d like to block tracking, use one of the many browser tools available.</p> \n\n<p>Our CLI tool reports an event for each command to our analytics, including the version of the CLI tool, the User ID, and the package name. This allows us to better understand how the CLI client is used, and informs our product development decisions.</p>\n<p>If you would like to opt out, you can do so by running the following command:</p>\n\n<div class=\"highlight\"><pre><code class=\"language-console\" data-lang=\"console\"><span class=\"go\">snyk config set disable-analytics=1</span></code></pre></div>\n\n<p>To remove the flag, run:</p>\n<div class=\"highlight\"><pre><code class=\"language-console\" data-lang=\"console\"><span class=\"go\">snyk config unset disable-analytics</span></code></pre></div>\n\n<p>If you have any questions or problems, please <a href=\"mailto:support@snyk.io\">email us</a>.</p>\n\n\n</p></p>\n"
  }
]
